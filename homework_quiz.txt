POLYMORPHISM

1 - What does the word 'polymorphism' mean?

Polymorphism literally means (more or less) "many forms".



2 - What does it mean when we apply polymorphism to OO design? Give a simple Java example.

It means that something can change behaviour depending on the context. For example,
we can overload a class method by implementing it multiple times with the same name
but different types and/or numbers of inputs (it can also be the constructor).



3 - What can we use to implement polymorphism in Java?

We can use abstract classes, inheritance chains and interfaces.



4 - How many 'forms' can an object take when using polymorphism?

Any number.
A class can be at least as many forms as the number of classes in its inheritance chain.



5 - Give an example of when you could use polymorphism.

When I need to create an ArrayList of different classes (I can find something they have
in common and link them through an interface) [PDA example requires this one].

--------------------------------------------------------------------------------


COMPOSITION


1 - What do we mean by 'composition' in reference to object-oriented programming?

Passing a class to another class ("...has a..." relationship).
This is not polymorphism, it's just a way to tidy up the code but the type of
the object does not change.



2 - When would you use composition? Provide a simple example in Java.

I would favour composition over inheritance any time that the classes I intend to
implement are not naturally in a parent-child relationship. If the properties of
the classes that I'm implementing are not one the subset of the other, it is better
to keep the classes more loosely coupled and use composition instead of inheritance.
For example, items that are saleable in a supermarket.



3 - What is/are the advantage(s) of using composition?

Possible to use multiple interfaces for a class, possible to abstract classes
that are not already related by inheritance. It helps us to write SOLID code,
with lots of small parts and easily expandable.
